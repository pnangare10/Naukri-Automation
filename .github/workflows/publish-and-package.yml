name: Publish and Package

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  packages: write
  actions: read
  
jobs:
  publish-and-package:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for version bumping
        persist-credentials: false

    - name: Configure Git Authentication
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

    - name: Get current version
      id: current_version
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

    - name: Bump version
      id: version-bump
      uses: phips28/gh-action-bump-version@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag-prefix: 'v'
        minor-wording: 'feat,feature'
        major-wording: 'major,breaking'
        patch-wording: 'fix,patch,refactor'
        rc-wording: 'rc,alpha,beta'
        skip-tag: 'true'
        skip-commit: 'true'
        skip-push: 'true'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'

    - name: Update package.json version
      id: update_version
      run: |
        NEW_VERSION=$(node -p "require('./package.json').version")
        if [ ! -z "$NEW_VERSION" ]; then
          echo "Updating to version $NEW_VERSION"
          
          jq ".version = \"$NEW_VERSION\"" package.json > temp.json && mv temp.json package.json
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          git add package.json
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
          
          git push origin HEAD:main || {
            echo "Failed to push changes"
            echo "Fetching latest changes and retrying..."
            git fetch
            git rebase origin/main
            git push origin HEAD:main
          }
          
          echo "Successfully updated version to $NEW_VERSION"
        else
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "No new version detected, using current version: $CURRENT_VERSION"
          echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        fi

    - name: Install dependencies
      run: npm ci

    - name: Check npm version
      id: check_version
      run: |
        VERSION=$(node -p "require('./package.json').version")
        if npm view naukri-ninja@$VERSION version >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Version $VERSION already exists in npm registry, skipping publish"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Publish to npm
      if: steps.check_version.outputs.exists != 'true'
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Install pkg
      run: npm install pkg

    - name: Package application
      run: |  
        mkdir -p assets
        npx pkg . --output ./assets/naukri-ninja.exe --targets node18-win-x64

    # Zip the source code and add it to assets
    - name: Zip source code
      run: |
        # Exclude node_modules and any other directories you don't want to include
        zip -r ./assets/naukri-source-code.zip . -x "node_modules" "*.git/*" "*.github/*" "assets/*"

    - name: Get Commit Messages
      id: get_commits
      run: |
        COMMITS=$(git log $(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)..HEAD --pretty=format:"- %s")
        echo "COMMITS<<EOF" >> $GITHUB_ENV
        echo "$COMMITS" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: success()
      with:
        tag_name: v${{ steps.update_version.outputs.new_version }}
        name: "Release v${{ steps.update_version.outputs.new_version }}"
        body: |
          Automated release for Naukri Ninja
          Version: ${{ steps.update_version.outputs.new_version }}
          Previous Version: ${{ steps.current_version.outputs.version }}
          Build: ${{ github.run_number }}
          NPM Publish: ${{ steps.check_version.outputs.exists == 'true' && 'Skipped (version exists)' || 'Success' }}
          
          Changes:
          ${{ env.COMMITS }}
        draft: false
        prerelease: false
        files: |
          assets/naukri-ninja.exe
          assets/naukri-source-code.zip

    - name: Upload executable artifact
      uses: actions/upload-artifact@v4
      with:
        name: naukri-ninja-v${{ steps.update_version.outputs.new_version }}
        path: assets/naukri-ninja.exe
        retention-days: 7
